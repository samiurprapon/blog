{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_aql.21299bf6.chunk.js","mappings":"8FAKA,SAASA,EAAIC,GACXA,EAAMC,UAAUF,IAAM,CACpBG,QAAS,0BACTC,SAAU,CACRC,QACE,uEACFC,YAAY,EACZC,QAAQ,GAEVC,OAAQ,CACNH,QAAS,wCACTE,QAAQ,GAEVE,SAAU,SACVC,QAAS,CACP,CACEL,QAAS,iCACTC,YAAY,GAEd,wOACA,CACED,QAAS,yCACTC,YAAY,GAEd,CACED,QAAS,mCACTC,YAAY,GAEd,CACED,QAAS,wBAGbM,SAAU,uBACVC,QAAS,sBACTC,MAAO,CACLR,QAAS,OACTS,MAAO,YAETC,OAAQ,CACN,aACA,iBACA,yDAEFC,SAAU,wCACVC,YAAa,qBA/CjBC,EAAOC,QAAUnB,EACjBA,EAAIoB,YAAc,MAClBpB,EAAIqB,QAAU","sources":["../node_modules/refractor/lang/aql.js"],"sourcesContent":["'use strict'\n\nmodule.exports = aql\naql.displayName = 'aql'\naql.aliases = []\nfunction aql(Prism) {\n  Prism.languages.aql = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    property: {\n      pattern:\n        /([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    variable: /@@?\\w+/,\n    keyword: [\n      {\n        pattern: /(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,\n        lookbehind: true\n      },\n      /\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\\b/i, // pseudo keywords get a lookbehind to avoid false positives\n      {\n        pattern: /(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,\n        lookbehind: true\n      },\n      {\n        pattern: /\\bOPTIONS(?=\\s*\\{)/i\n      }\n    ],\n    function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    boolean: /\\b(?:true|false)\\b/i,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    number: [\n      /\\b0b[01]+/i,\n      /\\b0x[0-9a-f]+/i,\n      /(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i\n    ],\n    operator: /\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,\n    punctuation: /::|[?.:,;()[\\]{}]/\n  }\n}\n"],"names":["aql","Prism","languages","comment","property","pattern","lookbehind","greedy","string","variable","keyword","function","boolean","range","alias","number","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/refractor/lang/javadoclike.js","../node_modules/refractor/lang/typescript.js","../node_modules/refractor/lang/jsdoc.js"],"names":["javadoclike","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport","module","exports","displayName","aliases","typescript","extend","greedy","builtin","push","typeInside","decorator","at","function","generic","ts","refractorJavadoclike","require","refractorTypescript","jsdoc","register","javascript","type","source","parameterPrefix","code","replace","string","number","boolean","operator","example"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_jsdoc.1294997a.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      // eslint-disable-next-line regexp/no-dupe-characters-character-class\n      /\\b(?:asserts|infer|interface|module|namespace|type)(?!\\s*[^\\s_${}*a-zA-Z\\xA0-\\uFFFF])/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n","'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source\n    var parameterPrefix =\n      '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(\n          parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix +\n            /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(@(?:augments|extends|class|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(\n              /<TYPE>/g,\n              function () {\n                return type\n              }\n            )\n          ),\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            string: javascript.string,\n            number: javascript.number,\n            boolean: javascript.boolean,\n            keyword: Prism.languages.typescript.keyword,\n            operator: /=>|\\.\\.\\.|[&|?:*]/,\n            punctuation: /[.,;=<>{}()[\\]]/\n          }\n        }\n      ],\n      example: {\n        pattern:\n          /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n"],"sourceRoot":""}